#!/usr/bin/env bash

set -e

SCRIPT="$(cd "${0%/*}" && echo "$PWD")/${0##*/}"
SCRIPT="$(readlink -f "$SCRIPT")"
SCRIPT_DIR="$(dirname "$SCRIPT")"

SOURCE_DIR="${SOURCE_DIR:-/srv/www/htdocs/opensuse}"
BASE_URL="${BASE_URL:-http://download.opensuse.org/tumbleweed}"
# Preferrable to use rsync.opensuse.org, but regularly out-of-sync.
RSYNC_URL="${RSYNC_URL:-mirror.us.leaseweb.net::opensuse/tumbleweed/}"
RSYNC_INCLUDE="${RSYNC_INCLUDE:-$SCRIPT_DIR/rsync/include-skeleton.txt}"
RSYNC_INCLUDE_RPM="${RSYNC_INCLUDE_RPM:-$SCRIPT_DIR/rsync/include-rpm.txt}"
SNAPSHOT_AGE_MAX="${SNAPSHOT_AGE_MAX:--120 days}"
SNAPSHOT_OLDEST=$(date -d "$SNAPSHOT_AGE_MAX" +%Y%m%d)
SNAPSHOT_COUNT_MAX=50
SNAPSHOT_DELAY="${SNAPSHOT_DELAY:-36000}" # 10 * 3600
SNAPSHOT_META_ONLY=1


# Check for automatically set credentials.
if [ -z ${AWS_CONTAINER_CREDENTIALS_RELATIVE_URI+x} ] ; then
  if [ -z ${AWS_KEY+x} ] || [ -z ${AWS_SECRET+x} ] || [ -z ${AWS_BUCKET+x} ] ; then
    echo "AWS_KEY, AWS_SECRET, and AWS_BUCKET are required for S3 access"
    exit 1
  elif [ ! -d ~/.aws ] ; then
    # Initialize aws-cli configuration.
    echo "Initializing ~/.aws..."
    mkdir ~/.aws
    echo "[default]" > ~/.aws/credentials
    echo "aws_access_key_id = $AWS_KEY" >> ~/.aws/credentials
    echo "aws_secret_access_key = $AWS_SECRET" >> ~/.aws/credentials
  else
    echo "using existing config in ~/.aws"
  fi
elif [ -z ${AWS_BUCKET+x} ] ; then
  echo "AWS_BUCKET is required for S3 access"
  exit 1
else
  echo "using automatic credentials"
fi

if [ ! -d "$SOURCE_DIR" ] ; then
  mkdir -p "$SOURCE_DIR"
fi

snapshots=($(aws s3 ls "s3://$AWS_BUCKET" | grep -oP "PRE \K\d+" | sort -r))
snapshot=$(wget -qO - "$BASE_URL/repo/oss/media.1/products" | grep -oP " \K\d+")
echo -n "current snapshot is $snapshot..."

if [ "$snapshot" == "${snapshots[0]}" ] ; then
  echo "already snapshotted"
  exit
elif [ "$snapshot" == "" ] ; then
  echo "empty snapshot, exit."
  exit 1
fi
echo "new"

if [ $(aws s3 cp "s3://$AWS_BUCKET/latest" -) == "$snapshot" ] ; then
  delta="$(( $(date +%s) - $(date --date "$(aws s3 ls "s3://$AWS_BUCKET/latest" | grep -oP '^[^ ]+ [^ ]+')" +%s) ))"
  echo "already seen, $delta seconds ago..."
  if [ "$delta" -ge "$SNAPSHOT_DELAY" ] ; then
    echo "waited long enough (>= $SNAPSHOT_DELAY)..."
    SNAPSHOT_META_ONLY=0
  else
    echo "need to wait $SNAPSHOT_DELAY seconds..."
    exit
  fi
fi
echo "creating snapshot against ${snapshots[0]}..."


snapshot_remove()
{
  local snapshot=$1
  local snapshot_next=$2
  echo "removing $snapshot by comparing against $snapshot_next..."
  if [ ! -f "$SOURCE_DIR/$snapshot/rpm.list" ] ; then
    aws s3 cp "s3://$AWS_BUCKET/$snapshot/rpm.list" "$SOURCE_DIR/$snapshot/rpm.list"
  fi
  if [ ! -f "$SOURCE_DIR/$snapshot_next/rpm.list" ] ; then
    aws s3 cp "s3://$AWS_BUCKET/$snapshot_next/rpm.list" "$SOURCE_DIR/$snapshot_next/rpm.list"
  fi
  comm --check-order -23 "$SOURCE_DIR/$snapshot/rpm.list" "$SOURCE_DIR/$snapshot_next/rpm.list" > "$SOURCE_DIR/$snapshot/rpm.unique.remove.list"

  wc -l "$SOURCE_DIR/$snapshot/rpm.unique.remove.list"
  cat "$SOURCE_DIR/$snapshot/rpm.unique.remove.list" | \
  while read line ; do
    aws s3 rm "s3://$AWS_BUCKET/shared/$line"
  done
  aws s3 rm --recursive "s3://$AWS_BUCKET/$snapshot"
}

if [ "$SNAPSHOT_OLDEST" != "" ] ; then
  echo "checking for expired snapshots (older than $SNAPSHOT_OLDEST)..."
  previous=""
  index=1
  for snap in ${snapshots[@]} ; do
    if ( [ $snap -lt $SNAPSHOT_OLDEST ] || [ $index -ge $SNAPSHOT_COUNT_MAX ] ) && [ "$previous" != "" ] ; then
      snapshots=(${snapshots[@]/$snap})
      snapshot_remove $snap $previous
    fi
    previous=$snap
    ((index++))
  done
fi


echo "updating redirects..."
parts=()
for snap in ${snapshots[@]} ; do
  if [ "$snap" == "$snapshot" ] ; then
    continue
  fi

  parts+=('{
  "Condition": {
    "HttpErrorCodeReturnedEquals": "404",
    "KeyPrefixEquals": "'$snap'"
  },
  "Redirect": {
    "HttpRedirectCode": "301",
    "ReplaceKeyPrefixWith": "shared"
  }
},')
done

if [ ${#parts[@]} -gt 0 ] ; then
  combined="${parts[@]}"
  # Prefix with comma and remove trailing comma.
  combined=",${combined::-1}"
else
  combined=""
fi

# Generate complete config for current and previous snapshots. Current should
# always redirect to d.o.o while previous redirect missing files to shared.
cat > /tmp/website-config.json << EOM
{
  "ErrorDocument": {
    "Key": "404.html"
  },
  "IndexDocument": {
    "Suffix": "index.html"
  },
  "RoutingRules": [
    {
      "Condition": {
        "KeyPrefixEquals": "$snapshot"
      },
      "Redirect": {
        "HostName": "download.opensuse.org",
        "HttpRedirectCode": "302",
        "Protocol": "http",
        "ReplaceKeyPrefixWith": "tumbleweed"
      }
    }
    $combined
  ]
}
EOM

cat /tmp/website-config.json
aws s3api put-bucket-website --bucket "$AWS_BUCKET" --website-configuration file:///tmp/website-config.json

echo "updating lastest and list files..."
echo "$snapshot" > "$SOURCE_DIR/latest"
echo "$snapshot" > "$SOURCE_DIR/list"
printf '%s\n' "${snapshots[@]}" >> "$SOURCE_DIR/list"

aws s3 cp --acl public-read --content-type text/plain "$SOURCE_DIR/latest" "s3://$AWS_BUCKET/latest"
aws s3 cp --acl public-read --content-type text/plain "$SOURCE_DIR/list" "s3://$AWS_BUCKET/list"
aws s3 cp --acl public-read "$SCRIPT_DIR/resource/index.html" "s3://$AWS_BUCKET/index.html"

if [ "$SNAPSHOT_META_ONLY" -eq 1 ] ; then
  aws cloudfront create-invalidation \
    --distribution-id "$DISTRIBUTION_ID" \
    --paths /latest /list "/${snapshots[0]}/*"
  echo "meta only...exit"
  exit
fi


echo "rsync unversioned base files..."
rsync --recursive --delete --delete-excluded --copy-links --itemize-changes --no-motd \
  --include-from "$RSYNC_INCLUDE" "$RSYNC_URL" "$SOURCE_DIR/$snapshot"

echo "rsync rpm list..."
rsync --recursive --list-only --no-motd \
  --include-from "$RSYNC_INCLUDE_RPM" "$RSYNC_URL" | \
  grep -oP "[^ ]+\.rpm$" | sort -n > "$SOURCE_DIR/$snapshot/rpm.list"

echo "determine unique rpm list..."
if [ ${#snapshots[@]} -gt 0 ] ; then
  echo "comparing $snapshot against ${snapshots[0]}..."
  aws s3 cp "s3://$AWS_BUCKET/${snapshots[0]}/rpm.list" "$SOURCE_DIR/${snapshots[0]}/rpm.list"
  comm --check-order -23 "$SOURCE_DIR/$snapshot/rpm.list" "$SOURCE_DIR/${snapshots[0]}/rpm.list" > "$SOURCE_DIR/$snapshot/rpm.unique.list"
else
  cp "$SOURCE_DIR/$snapshot/rpm.list" "$SOURCE_DIR/$snapshot/rpm.unique.list"
fi
wc -l "$SOURCE_DIR/$snapshot/rpm.unique.list"

if [ ! -d "$SOURCE_DIR/shared" ] ; then
  mkdir "$SOURCE_DIR/shared"
fi

echo "rsync unqiue rpms to shared directory..."
rsync --recursive --copy-links --size-only --itemize-changes --no-motd \
  --files-from "$SOURCE_DIR/$snapshot/rpm.unique.list" "$RSYNC_URL" "$SOURCE_DIR/shared"

(
  cd "$SOURCE_DIR"
  du -sh "$snapshot"
  wc -l "$snapshot/rpm.unique.list"
  du -sh "shared"
) > "$SOURCE_DIR/$snapshot/disk"
cat "$SOURCE_DIR/$snapshot/disk"

echo "sync snapshot directory to S3..."
aws s3 sync --acl public-read --size-only "$SOURCE_DIR/$snapshot" "s3://$AWS_BUCKET/$snapshot"

echo "sync shared directory to S3..."
aws s3 sync --acl public-read --size-only "$SOURCE_DIR/shared" "s3://$AWS_BUCKET/shared"

echo "snapshot created successfully"
